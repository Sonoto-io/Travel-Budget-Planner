stages:
  - build
  - test
  - deploy

docker-build-frontend:
  stage: build
  image: docker:cli
  services: [docker:dind]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_SLUG" -f frontend/docker/Dockerfile frontend/
    - docker push "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_SLUG"

docker-build-backend:
  stage: build
  image: docker:cli
  services: [docker:dind]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG" -f backend/docker/Dockerfile backend/
    - docker push "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG"

unit-tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/$APP:$CI_COMMIT_REF_SLUG
  variables:
    DATABASE_URL: "postgresql://tbpuser:tbppassword@localhost:5432/travel_budget_planner"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd $APP && make tests
  coverage: "/All files[^|]*|[^|]*\\s+([\\d\\.]+)/"
  parallel:
    matrix:
      - APP: [frontend, backend]

backend-lint:
  stage: test
  image: oven/bun:1
  before_script:
    - apt-get update && apt-get install make
  script:
    - cd backend
    - bun install --dev
    - make lint

frontend-lint:
  stage: test
  image: node:current-bullseye
  before_script:
    - apt-get update && apt-get install -y make
  script:
    - cd frontend
    - npm ci
    - npm run lint
