services:
  reverse-proxy:
    image: traefik:v3.3.5
    command:
      - --api.insecure=true
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --certificatesresolvers.devresolver.acme.tlschallenge=true
      - --certificatesresolvers.devresolver.acme.email=you@example.com
      - --certificatesresolvers.devresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/certs

  db:
    image: postgres:17.4
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=tbpuser
      - POSTGRES_PASSWORD=tbppassword
      - POSTGRES_DB=travel_budget_planner
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.db.rule=Host(`db.localhost`)"

  pgadmin:
    image: dpage/pgadmin4:8.6
    logging:
      driver: none
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  backend:
    build:
      context: backend
      dockerfile: docker/Dockerfile
    env_file: ".env.development.local"
    environment:
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      AUTHORIZE_URL: ${AUTHORIZE_URL}
      TOKEN_URL: ${TOKEN_URL}
      REDIRECT_URI: ${REDIRECT_URI}
      JWKS_URL: ${JWKS_URL}
      ALGORITHM: ${ALGORITHM}
      DATABASE_URL: ${DATABASE_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      ISSUER: ${ISSUER}
      API_KEY: ${API_KEY}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/"]
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_started
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.backend.rule=Host(`app.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.priority=10"
      - "traefik.http.routers.backend.middlewares=strip-api"
      - "traefik.http.routers.backend.service=backend_service"
      # Middleware: strip /api
      - "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      # Service: points to container port
      - "traefik.http.services.backend_service.loadbalancer.server.port=3000"
    develop:
      watch:
        - path: ./backend
          target: /app
          action: rebuild

  frontend:
    build:
      context: frontend
      dockerfile: docker/Dockerfile
    env_file: ".env.development.local"
    environment:
      VITE_MOCKS_ENABLED : ${MOCKS_ENABLED:-false}
    ports:
      - "5173:5173"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.service=frontend_service"
      - "traefik.http.services.frontend_service.loadbalancer.server.port=5173"
      - "traefik.http.routers.frontend.middlewares=frontend-errors"
      - "traefik.http.middlewares.frontend-errors.errors.status=400-599"
      - "traefik.http.middlewares.frontend-errors.errors.service=frontend_service"
      - "traefik.http.middlewares.frontend-errors.errors.query=/index.html"

    develop:
      watch:
        - path: ./frontend
          target: /app
          action: sync

volumes:
  postgres_data:
