services:
  reverse-proxy:
    image: traefik:v3.3.5
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8081:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

  db:
    image: postgres:17.4
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=tbpuser
      - POSTGRES_PASSWORD=tbppassword
      - POSTGRES_DB=travel_budget_planner
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.db.rule=Host(`db.localhost`)"

  pgadmin:
    image: dpage/pgadmin4:8.6
    logging:
      driver: none
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  backend:
    build:
      context: backend
      dockerfile: docker/Dockerfile
    env_file: ".env.development.local"
    environment:
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      AUTHORIZE_URL: ${AUTHORIZE_URL}
      TOKEN_URL: ${TOKEN_URL}
      REDIRECT_URI: ${REDIRECT_URI}
      JWK_URL: ${JWK_URL}
      ALGORITHM: ${ALGORITHM}
      DATABASE_URL: ${DATABASE_URL}
    healthcheck:
      test: curl --fail http://localhost:3000/ || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_started
        restart: true
    volumes:
      - ./backend:/app
    ports:
      - 3000:3000
    labels:
      traefik.enable: true
      traefik.http.routers.backend.rule: Host(`app.localhost`) && PathPrefix(`/api`)
      traefik.http.routers.backend.service: backend_service
      traefik.http.services.backend_service.loadbalancer.server.port: 3000
      traefik.http.middlewares.strip-api.stripprefix.prefixes: /api
      traefik.http.routers.backend.middlewares: strip-api
      traefik.http.routers.backend.priority: "10"
    develop:
      watch:
        - path: ./backend
          action: rebuild

  frontend:
    build:
      context: frontend
      dockerfile: docker/Dockerfile
    env_file: ".env.development.local"
    volumes:
      - "./frontend:/app"
      - "/app/node_modules"
    ports:
      - 8080:8080
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.rule: Host(`app.localhost`)
      traefik.http.routers.frontend.priority: "1"
      traefik.http.routers.frontend.service: frontend_service
      traefik.http.services.frontend_service.loadbalancer.server.port: 8080
    develop:
      watch:
        - path: ./frontend
          action: rebuild
volumes:
  postgres_data:
